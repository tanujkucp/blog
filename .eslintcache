[{"/home/tanuj/WebstormProjects/blogs/src/reportWebVitals.js":"1","/home/tanuj/WebstormProjects/blogs/src/Home.js":"2","/home/tanuj/WebstormProjects/blogs/src/index.js":"3","/home/tanuj/WebstormProjects/blogs/src/widgets/Header.js":"4","/home/tanuj/WebstormProjects/blogs/src/widgets/Footer.js":"5","/home/tanuj/WebstormProjects/blogs/src/Signup.js":"6","/home/tanuj/WebstormProjects/blogs/src/TagPage.js":"7","/home/tanuj/WebstormProjects/blogs/src/Publish.js":"8","/home/tanuj/WebstormProjects/blogs/src/widgets/WaveBorder.js":"9","/home/tanuj/WebstormProjects/blogs/src/widgets/PostCard.js":"10","/home/tanuj/WebstormProjects/blogs/src/Profile.js":"11","/home/tanuj/WebstormProjects/blogs/src/Login.js":"12","/home/tanuj/WebstormProjects/blogs/src/widgets/ProfileCard.js":"13"},{"size":362,"mtime":1609911338480,"results":"14","hashOfConfig":"15"},{"size":3276,"mtime":1609923068355,"results":"16","hashOfConfig":"15"},{"size":1669,"mtime":1609918685232,"results":"17","hashOfConfig":"15"},{"size":2020,"mtime":1609917839747,"results":"18","hashOfConfig":"15"},{"size":930,"mtime":1609917983328,"results":"19","hashOfConfig":"15"},{"size":8331,"mtime":1609926049038,"results":"20","hashOfConfig":"15"},{"size":2209,"mtime":1609918625909,"results":"21","hashOfConfig":"15"},{"size":9427,"mtime":1609930726717,"results":"22","hashOfConfig":"15"},{"size":1984,"mtime":1609921283504,"results":"23","hashOfConfig":"15"},{"size":3397,"mtime":1609930664802,"results":"24","hashOfConfig":"15"},{"size":2995,"mtime":1609928298858,"results":"25","hashOfConfig":"15"},{"size":5920,"mtime":1609926159535,"results":"26","hashOfConfig":"15"},{"size":2756,"mtime":1609927521908,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"37egpg",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tanuj/WebstormProjects/blogs/src/reportWebVitals.js",[],["60","61"],"/home/tanuj/WebstormProjects/blogs/src/Home.js",[],"/home/tanuj/WebstormProjects/blogs/src/index.js",[],["62","63"],"/home/tanuj/WebstormProjects/blogs/src/widgets/Header.js",["64","65"],"/home/tanuj/WebstormProjects/blogs/src/widgets/Footer.js",["66"],"import React from 'react';\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Link from \"@material-ui/core/Link/Link\";\nimport configs from \"./../config\";\nimport TelegramIcon from '@material-ui/icons/Telegram';\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" align=\"center\" style={{color: '#d0d0d0'}}>\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href={configs.website_address}>\n                {configs.website_name}\n            </Link>{' '}\n            {new Date().getFullYear()}\n\n        </Typography>\n    );\n}\n\nexport default function Footer() {\n    return (\n        <footer style={{backgroundColor: 'rgb(36, 40, 44)', padding: 10}}>\n\n            <Typography variant=\"h5\" align=\"center\" style={{color: 'white'}} component=\"p\">\n                A short Blog App for CoFoundersTown\n            </Typography>\n\n            <Copyright/>\n        </footer>\n    );\n\n}\n\n","/home/tanuj/WebstormProjects/blogs/src/Signup.js",["67","68"],"/home/tanuj/WebstormProjects/blogs/src/TagPage.js",["69","70"],"/home/tanuj/WebstormProjects/blogs/src/Publish.js",["71","72","73","74"],"import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {makeStyles} from '@material-ui/core/styles';\n\nimport configs from './config.json';\nimport Footer from './widgets/Footer';\nimport Header from './widgets/Header';\nimport WaveBorder from \"./widgets/WaveBorder\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Input from \"@material-ui/core/Input\";\nimport Chip from \"@material-ui/core/Chip\";\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport PostCard from \"./widgets/PostCard\";\n\nconst useStyles = makeStyles((theme) => ({\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n        justifyContent: 'center'\n    },\n    waveBorder: {\n        paddingTop: theme.spacing(4),\n    },\n    paper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifySelf: 'center',\n        paddingTop: 10,\n        marginTop: 10\n    },\n    form: {\n        width: '90%', // Fix IE 11 issue.\n        paddingBottom: 10\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n}));\n\nfunction Publish() {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(false);\n    const [response, setResponse] = useState([]);\n    const [post, setPost] = useState({title: '', body: '', image: '', tags: []});\n    const [error, setError] = useState();\n    const [info, setInfo] = useState();\n    const handleChange = (event) => {\n        let newPost = {\n            ...post,\n            [event.target.name]: event.target.value\n        };\n        setPost(newPost);\n    };\n\n    //store data to server\n    const savePost = () => {\n        setLoading(true);\n        //todo get JWT from local storage\n\n        //todo if found, add JWT to request and send to server\n        //todo if not found, redirect to home\n        axios.post(configs.server_address + \"/publish\", post)\n            .then((res) => {\n                if (res.data.success) {\n                    //show success message\n                    setInfo('New blog post created!');\n                }\n                setLoading(false);\n            }).catch((err) => {\n            setLoading(false);\n            console.log(err);\n            if (err.response) setError(err.response.data.message);\n        });\n    };\n\n    const ITEM_HEIGHT = 48;\n    const ITEM_PADDING_TOP = 8;\n    const MenuProps = {\n        PaperProps: {\n            style: {\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n                width: 250,\n            },\n        },\n    };\n    const tagOptions = ['Science', 'Lifestyle', 'Social', 'Economy'];\n\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n\n            <Header/>\n            {loading ? (<LinearProgress variant=\"query\" color=\"secondary\"/>) : (null)}\n            <main style={{backgroundColor: \"#cfd8dc\"}}>\n                <Snackbar open={error} autoHideDuration={5000} onClose={() => setError(null)}>\n                    <Alert severity=\"error\" onClose={() => setError(null)}>\n                        {error}\n                    </Alert>\n                </Snackbar>\n                <Snackbar open={info} autoHideDuration={5000} onClose={() => setInfo(null)}>\n                    <Alert severity=\"success\" onClose={() => setInfo(null)}>\n                        {info}\n                    </Alert>\n                </Snackbar>\n\n                <Container className={classes.cardGrid} maxWidth=\"sm\">\n                    {/*Preview of post*/}\n                    <PostCard post={post} key={post.title}/>\n                    <Paper className={classes.paper}>\n                        <Avatar className={classes.avatar}>\n                            <PostAddIcon/>\n                        </Avatar>\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Create a Blog post\n                        </Typography>\n                        <form className={classes.form} noValidate>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        value={post.title}\n                                        name={'title'}\n                                        label=\"Post Title\"\n                                        onChange={handleChange}\n                                        fullWidth\n                                        autoFocus\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        value={post.image}\n                                        name={'image'}\n                                        label=\"Banner image link\"\n                                        onChange={handleChange}\n                                        fullWidth\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FormControl className={classes.formControl} fullWidth>\n                                        <InputLabel>Add Some Tags</InputLabel>\n                                        <Select\n                                            multiple\n                                            value={post.tags}\n                                            name={'tags'}\n                                            onChange={handleChange}\n                                            input={<Input id=\"select-multiple-chip\"/>}\n                                            renderValue={(selected) => (\n                                                <div className={classes.chips}>\n                                                    {selected.map((value) => (\n                                                        <Chip icon={<LocalOfferIcon/>} key={value} label={value}\n                                                              className={classes.chip}/>\n                                                    ))}\n                                                </div>\n                                            )}\n                                            MenuProps={MenuProps}\n                                        >\n                                            {tagOptions.map((name) => (\n                                                <MenuItem key={name} value={name}>\n                                                    {name}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Body of your post\"\n                                        multiline\n                                        required\n                                        rowsMax={15}\n                                        variant=\"outlined\"\n                                        value={post.body}\n                                        name={'body'}\n                                        onChange={handleChange}\n                                    />\n                                </Grid>\n                            </Grid>\n\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submit}\n                                onClick={savePost}\n                            >\n                                Publish Blog Post\n                            </Button>\n\n                        </form>\n                    </Paper>\n                </Container>\n\n            </main>\n\n            {/* Footer */}\n            <WaveBorder\n                upperColor=\"#cfd8dc\"\n                lowerColor={'rgb(36, 40, 44)'}\n                animationNegativeDelay={4}\n            />\n            <Footer/>\n            {/* End footer */}\n\n        </React.Fragment>\n    );\n}\n\nexport default Publish;\n","/home/tanuj/WebstormProjects/blogs/src/widgets/WaveBorder.js",[],"/home/tanuj/WebstormProjects/blogs/src/widgets/PostCard.js",[],"/home/tanuj/WebstormProjects/blogs/src/Profile.js",["75","76","77","78","79","80","81"],"import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {makeStyles} from '@material-ui/core/styles';\n\nimport configs from './config.json';\nimport Footer from './widgets/Footer';\nimport Header from './widgets/Header';\nimport WaveBorder from \"./widgets/WaveBorder\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ProfileCard from \"./widgets/ProfileCard\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PostCard from \"./widgets/PostCard\";\n\nconst useStyles = makeStyles((theme) => ({\n    cardGrid: {\n        paddingTop: theme.spacing(5),\n        paddingBottom: theme.spacing(5),\n        justifyContent: 'center'\n    },\n    waveBorder: {\n        paddingTop: theme.spacing(4),\n    }\n}));\n\nfunction Profile(props) {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(false);\n    const [response, setResponse] = useState([]);\n    const {params} = props.match;\n\n    //fetch data from server\n    const loadData = () => {\n        //todo get JWT from local storage\n\n        //todo if found, add JWT to request and send to server\n        //todo if not found, redirect to home\n        axios.post(configs.server_address + '/profile', {username: params.username}).then(res => {\n            if (res.data.success) {\n                setResponse(res.data.data);\n                setLoading(false);\n            }else {\n                //todo redirect to home\n            }\n        }).catch(err => {\n            console.log(err);\n            setLoading(false);\n            //todo redirect to home\n        });\n    };\n\n    useEffect(() => {\n        setLoading(true);\n        loadData();\n    }, []);\n\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n\n            <Header/>\n\n            <main style={{backgroundColor: \"#cfd8dc\"}}>\n                {/*Profile Info*/}\n                <Container className={classes.cardGrid} maxWidth=\"sm\">\n                    {/*<ProfileCard profile={response.profile}/>*/}\n                </Container>\n                {/*Publishes articles*/}\n                <Container className={classes.cardGrid} maxWidth=\"lg\">\n                    {/*{response ? (<div>*/}\n                    {/*        <Grid container spacing={4}>*/}\n                    {/*            {response.posts.map((post) => (*/}\n                    {/*                <PostCard post={post} key={post.title}/>*/}\n                    {/*            ))}*/}\n                    {/*        </Grid>*/}\n                    {/*    </div>*/}\n                    {/*) : (null)}*/}\n                </Container>\n\n            </main>\n\n            {/* Footer */}\n            <WaveBorder\n                upperColor=\"#cfd8dc\"\n                lowerColor={'rgb(36, 40, 44)'}\n                animationNegativeDelay={4}\n            />\n            <Footer/>\n            {/* End footer */}\n\n        </React.Fragment>\n    );\n}\n\nexport default Profile;\n","/home/tanuj/WebstormProjects/blogs/src/Login.js",["82","83"],"import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {makeStyles} from '@material-ui/core/styles';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport configs from './config.json';\nimport Footer from './widgets/Footer';\nimport Header from './widgets/Header';\nimport WaveBorder from \"./widgets/WaveBorder\";\nimport back_image from './assets/deadpool.png';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles((theme) => ({\n    cardGrid: {\n        paddingTop: theme.spacing(10),\n        paddingBottom: theme.spacing(10),\n        justifyContent: 'center'\n    },\n    waveBorder: {\n        paddingTop: theme.spacing(4),\n    },\n    paper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifySelf: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '90%', // Fix IE 11 issue.\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction Login() {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(false);\n    const [credentials, setCredentials] = useState({username: '', password: ''});\n    const [error, setError] = useState();\n    const [info, setInfo] = useState();\n\n    const handleChange = (event) => {\n        let newCred = {\n            ...credentials,\n            [event.target.name]: event.target.value\n        };\n        setCredentials(newCred);\n    };\n    //store data to server\n    const login = () => {\n        setLoading(true);\n        axios.post(configs.server_address + \"/login\", credentials)\n            .then((res) => {\n                if (res.data.success) {\n                    //show success message\n                    setInfo('You have logged in successfully!');\n                    //todo redirect to home page\n                    //todo save jwt token in local storage\n                }\n                setLoading(false);\n            }).catch((err) => {\n            setLoading(false);\n            console.log(err);\n            if (err.response) setError(err.response.data.message);\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n\n            <Header/>\n            {loading ? (<LinearProgress variant=\"query\" color=\"secondary\"/>) : (null)}\n            <main style={{backgroundColor: \"#cfd8dc\"}}>\n                <Snackbar open={error} autoHideDuration={5000} onClose={() => setError(null)}>\n                    <Alert severity=\"error\" onClose={() => setError(null)}>\n                        {error}\n                    </Alert>\n                </Snackbar>\n                <Snackbar open={info} autoHideDuration={5000} onClose={() => setInfo(null)}>\n                    <Alert severity=\"success\" onClose={() => setInfo(null)}>\n                        {info}\n                    </Alert>\n                </Snackbar>\n\n                <Container className={classes.cardGrid} maxWidth=\"sm\">\n                    <Paper className={classes.paper}>\n                        <Avatar className={classes.avatar}/>\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Log In\n                        </Typography>\n                        <form className={classes.form} noValidate>\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                label=\"Username\"\n                                name=\"username\"\n                                value={credentials.username}\n                                onChange={handleChange}\n                                autoComplete=\"email\"\n                                autoFocus\n                                style={{backgroundColor: '#eee'}}\n                            />\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                value={credentials.password}\n                                onChange={handleChange}\n                                autoComplete=\"current-password\"\n                                style={{backgroundColor: '#eee'}}\n                            />\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submit}\n                                onClick={login}\n                            >\n                                Log In\n                            </Button>\n\n                        </form>\n                    </Paper>\n                </Container>\n            </main>\n\n            {/* Footer */}\n            <WaveBorder\n                upperColor=\"#cfd8dc\"\n                lowerColor={'rgb(36, 40, 44)'}\n                animationNegativeDelay={4}\n            />\n            <Footer/>\n            {/* End footer */}\n\n        </React.Fragment>\n    );\n}\n\nexport default Login;\n","/home/tanuj/WebstormProjects/blogs/src/widgets/ProfileCard.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"84","replacedBy":"88"},{"ruleId":"86","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":8,"column":8,"nodeType":"92","messageId":"93","endLine":8,"endColumn":14},{"ruleId":"90","severity":1,"message":"94","line":9,"column":8,"nodeType":"92","messageId":"93","endLine":9,"endColumn":18},{"ruleId":"90","severity":1,"message":"95","line":5,"column":8,"nodeType":"92","messageId":"93","endLine":5,"endColumn":20},{"ruleId":"90","severity":1,"message":"96","line":1,"column":16,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"97","line":11,"column":8,"nodeType":"92","messageId":"93","endLine":11,"endColumn":18},{"ruleId":"90","severity":1,"message":"98","line":34,"column":12,"nodeType":"92","messageId":"93","endLine":34,"endColumn":19},{"ruleId":"90","severity":1,"message":"99","line":35,"column":12,"nodeType":"92","messageId":"93","endLine":35,"endColumn":21},{"ruleId":"90","severity":1,"message":"96","line":1,"column":16,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"100","line":18,"column":8,"nodeType":"92","messageId":"93","endLine":18,"endColumn":15},{"ruleId":"90","severity":1,"message":"101","line":71,"column":12,"nodeType":"92","messageId":"93","endLine":71,"endColumn":20},{"ruleId":"90","severity":1,"message":"102","line":71,"column":22,"nodeType":"92","messageId":"93","endLine":71,"endColumn":33},{"ruleId":"90","severity":1,"message":"103","line":10,"column":8,"nodeType":"92","messageId":"93","endLine":10,"endColumn":18},{"ruleId":"90","severity":1,"message":"104","line":11,"column":8,"nodeType":"92","messageId":"93","endLine":11,"endColumn":19},{"ruleId":"90","severity":1,"message":"105","line":13,"column":8,"nodeType":"92","messageId":"93","endLine":13,"endColumn":12},{"ruleId":"90","severity":1,"message":"106","line":14,"column":8,"nodeType":"92","messageId":"93","endLine":14,"endColumn":16},{"ruleId":"90","severity":1,"message":"98","line":29,"column":12,"nodeType":"92","messageId":"93","endLine":29,"endColumn":19},{"ruleId":"90","severity":1,"message":"101","line":30,"column":12,"nodeType":"92","messageId":"93","endLine":30,"endColumn":20},{"ruleId":"107","severity":1,"message":"108","line":56,"column":8,"nodeType":"109","endLine":56,"endColumn":10,"suggestions":"110"},{"ruleId":"90","severity":1,"message":"96","line":1,"column":16,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"97","line":11,"column":8,"nodeType":"92","messageId":"93","endLine":11,"endColumn":18},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],["111"],["112"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'SearchIcon' is defined but never used.","'TelegramIcon' is defined but never used.","'useEffect' is defined but never used.","'back_image' is defined but never used.","'loading' is assigned a value but never used.","'responses' is assigned a value but never used.","'Divider' is defined but never used.","'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'Typography' is defined but never used.","'ProfileCard' is defined but never used.","'Grid' is defined but never used.","'PostCard' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","ArrayExpression",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [loadData]",{"range":"116","text":"117"},[1751,1753],"[loadData]"]