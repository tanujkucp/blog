[{"/home/tanuj/WebstormProjects/blogs/src/reportWebVitals.js":"1","/home/tanuj/WebstormProjects/blogs/src/Home.js":"2","/home/tanuj/WebstormProjects/blogs/src/index.js":"3","/home/tanuj/WebstormProjects/blogs/src/widgets/Header.js":"4","/home/tanuj/WebstormProjects/blogs/src/widgets/Footer.js":"5","/home/tanuj/WebstormProjects/blogs/src/Signup.js":"6","/home/tanuj/WebstormProjects/blogs/src/TagPage.js":"7","/home/tanuj/WebstormProjects/blogs/src/Publish.js":"8","/home/tanuj/WebstormProjects/blogs/src/widgets/WaveBorder.js":"9","/home/tanuj/WebstormProjects/blogs/src/widgets/PostCard.js":"10","/home/tanuj/WebstormProjects/blogs/src/Profile.js":"11","/home/tanuj/WebstormProjects/blogs/src/Login.js":"12","/home/tanuj/WebstormProjects/blogs/src/widgets/ProfileCard.js":"13","/home/tanuj/WebstormProjects/blogs/src/BlogPost.js":"14"},{"size":362,"mtime":1609911338480,"results":"15","hashOfConfig":"16"},{"size":3464,"mtime":1609942898519,"results":"17","hashOfConfig":"16"},{"size":1669,"mtime":1609918685232,"results":"18","hashOfConfig":"16"},{"size":2188,"mtime":1609943385070,"results":"19","hashOfConfig":"16"},{"size":930,"mtime":1609917983328,"results":"20","hashOfConfig":"16"},{"size":8542,"mtime":1609941869040,"results":"21","hashOfConfig":"16"},{"size":4067,"mtime":1609932190426,"results":"22","hashOfConfig":"16"},{"size":10242,"mtime":1609947658910,"results":"23","hashOfConfig":"16"},{"size":1984,"mtime":1609921283504,"results":"24","hashOfConfig":"16"},{"size":3374,"mtime":1609947748005,"results":"25","hashOfConfig":"16"},{"size":4922,"mtime":1609949027543,"results":"26","hashOfConfig":"16"},{"size":6420,"mtime":1609945248474,"results":"27","hashOfConfig":"16"},{"size":2756,"mtime":1609927521908,"results":"28","hashOfConfig":"16"},{"size":2211,"mtime":1609928054611,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"37egpg",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/tanuj/WebstormProjects/blogs/src/reportWebVitals.js",[],["63","64"],"/home/tanuj/WebstormProjects/blogs/src/Home.js",[],"/home/tanuj/WebstormProjects/blogs/src/index.js",[],["65","66"],"/home/tanuj/WebstormProjects/blogs/src/widgets/Header.js",["67","68"],"/home/tanuj/WebstormProjects/blogs/src/widgets/Footer.js",["69"],"import React from 'react';\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Link from \"@material-ui/core/Link/Link\";\nimport configs from \"./../config\";\nimport TelegramIcon from '@material-ui/icons/Telegram';\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" align=\"center\" style={{color: '#d0d0d0'}}>\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href={configs.website_address}>\n                {configs.website_name}\n            </Link>{' '}\n            {new Date().getFullYear()}\n\n        </Typography>\n    );\n}\n\nexport default function Footer() {\n    return (\n        <footer style={{backgroundColor: 'rgb(36, 40, 44)', padding: 10}}>\n\n            <Typography variant=\"h5\" align=\"center\" style={{color: 'white'}} component=\"p\">\n                A short Blog App for CoFoundersTown\n            </Typography>\n\n            <Copyright/>\n        </footer>\n    );\n\n}\n\n","/home/tanuj/WebstormProjects/blogs/src/Signup.js",["70"],"/home/tanuj/WebstormProjects/blogs/src/TagPage.js",["71"],"import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {makeStyles} from '@material-ui/core/styles';\n\nimport configs from './config.json';\nimport Footer from './widgets/Footer';\nimport Header from './widgets/Header';\nimport WaveBorder from \"./widgets/WaveBorder\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PostCard from \"./widgets/PostCard\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Chip from \"@material-ui/core/Chip\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n    heroContent: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(8, 0, 6),\n        paddingTop: 10,\n    },\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n        justifyContent: 'center'\n    },\n    waveBorder: {\n        paddingTop: theme.spacing(4),\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin:2\n    },\n}));\n\nfunction TagPage(props) {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(false);\n    const [responses, setResponses] = useState([]);\n    const {params} = props.match;\n    //fetch data from server\n    const loadData = (timestamp) => {\n        axios.post(configs.server_address + '/latest', {tag: params.tagname}).then(res => {\n            if (res.data.success) {\n                setResponses(res.data.data);\n                setLoading(false);\n            }\n        }).catch(err => {\n            setLoading(false);\n            console.log(err);\n        });\n\n    };\n\n    useEffect(() => {\n        setLoading(true);\n        loadData();\n    }, []);\n    const tagOptions = ['science', 'lifestyle', 'social', 'economy'];\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n\n            <Header/>\n\n            <main style={{backgroundColor: \"#cfd8dc\"}}>\n                {/* Hero unit */}\n                <div className={classes.heroContent}>\n                    <Container maxWidth=\"sm\">\n                        <Typography component=\"h1\" variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                            {params.tagname}\n                        </Typography>\n                        <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                            Explore awesome Blogs on {params.tagname}.\n                        </Typography>\n                        <div className={classes.chips}>\n                            {tagOptions.map((tag) => (\n                                <Button href={'/tags/' + tag}>\n                                    <Chip icon={<LocalOfferIcon/>} key={tag} label={tag}\n                                          className={classes.chip} />\n                                </Button>\n                            ))}\n                        </div>\n                    </Container>\n                </div>\n                {loading ? (<LinearProgress variant=\"query\" color=\"secondary\"/>) : (null)}\n\n                <Container className={classes.cardGrid} maxWidth=\"lg\">\n                    {responses ? (<div>\n                            <Grid container spacing={4}>\n                                {responses.map((post) => (\n                                    <PostCard post={post} key={post.title}/>\n                                ))}\n                            </Grid>\n                        </div>\n                    ) : (null)}\n                </Container>\n\n            </main>\n\n            {/* Footer */}\n            <WaveBorder\n                upperColor=\"#cfd8dc\"\n                lowerColor={'rgb(36, 40, 44)'}\n                animationNegativeDelay={4}\n            />\n            <Footer/>\n            {/* End footer */}\n\n        </React.Fragment>\n    );\n}\n\nexport default TagPage;\n","/home/tanuj/WebstormProjects/blogs/src/Publish.js",["72","73"],"import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {makeStyles} from '@material-ui/core/styles';\nimport configs from './config.json';\nimport Footer from './widgets/Footer';\nimport Header from './widgets/Header';\nimport WaveBorder from \"./widgets/WaveBorder\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Input from \"@material-ui/core/Input\";\nimport Chip from \"@material-ui/core/Chip\";\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport PostCard from \"./widgets/PostCard\";\nimport {Redirect} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n        justifyContent: 'center'\n    },\n    waveBorder: {\n        paddingTop: theme.spacing(4),\n    },\n    paper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifySelf: 'center',\n        paddingTop: 10,\n        marginTop: 10\n    },\n    form: {\n        width: '90%', // Fix IE 11 issue.\n        paddingBottom: 10\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n}));\n\nfunction Publish() {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(false);\n    const [response, setResponse] = useState([]);\n    const [post, setPost] = useState({title: '', body: '', image: '', tags: []});\n    const [error, setError] = useState();\n    const [info, setInfo] = useState();\n    const [savedUser, setSavedUser] = useState(null);\n    const [redirect, setRedirect] = useState();\n    const [jwt, setJWT]= useState();\n\n    const handleChange = (event) => {\n        let newPost = {\n            ...post,\n            [event.target.name]: event.target.value\n        };\n        setPost(newPost);\n    };\n\n    //store data to server\n    const savePost = () => {\n        setLoading(true);\n        //add JWT to request and send to server\n        axios.post(configs.server_address + \"/publish\", post, {\n            headers: {\n                Authorization: `Bearer ${jwt}`\n            }\n        }).then((res) => {\n                if (res.data.success) {\n                    //show success message\n                    setInfo('New blog post created!');\n                    //redirect to home page\n                    setTimeout(()=> setRedirect('/'), 3000);\n                }\n                setLoading(false);\n            }).catch((err) => {\n            setLoading(false);\n            console.log(err);\n            if (err.response) setError(err.response.data.message);\n        });\n    };\n\n    const ITEM_HEIGHT = 48;\n    const ITEM_PADDING_TOP = 8;\n    const MenuProps = {\n        PaperProps: {\n            style: {\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n                width: 250,\n            },\n        },\n    };\n    const tagOptions = ['science', 'lifestyle', 'social', 'economy'];\n    useEffect(() => {\n        const username = localStorage.getItem('username');\n        setSavedUser(username);\n        //get JWT from local storage\n        const jwt = localStorage.getItem('jwt');\n        if (jwt == null) {\n            //redirect to home page\n            setTimeout(() => setRedirect('/'), 1000);\n        }else setJWT(jwt);\n    }, []);\n\n    if (redirect) {\n        return <Redirect to={redirect}/>\n    }\n\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n\n            <Header user={savedUser}/>\n            {loading ? (<LinearProgress variant=\"query\" color=\"secondary\"/>) : (null)}\n            <main style={{backgroundColor: \"#cfd8dc\"}}>\n                <Snackbar open={error} autoHideDuration={5000} onClose={() => setError(null)}>\n                    <Alert severity=\"error\" onClose={() => setError(null)}>\n                        {error}\n                    </Alert>\n                </Snackbar>\n                <Snackbar open={info} autoHideDuration={5000} onClose={() => setInfo(null)}>\n                    <Alert severity=\"success\" onClose={() => setInfo(null)}>\n                        {info}\n                    </Alert>\n                </Snackbar>\n\n                <Container className={classes.cardGrid} maxWidth=\"sm\">\n                    {/*Preview of post*/}\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Preview\n                    </Typography>\n                    <PostCard post={{...post, created_at: Date.now()}} key={post.title}/>\n\n                    <Paper className={classes.paper}>\n                        <Avatar className={classes.avatar}>\n                            <PostAddIcon/>\n                        </Avatar>\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Create a Blog Post\n                        </Typography>\n                        <form className={classes.form} noValidate>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        value={post.title}\n                                        name={'title'}\n                                        label=\"Post Title\"\n                                        onChange={handleChange}\n                                        fullWidth\n                                        autoFocus\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        value={post.image}\n                                        name={'image'}\n                                        label=\"Banner image link\"\n                                        onChange={handleChange}\n                                        fullWidth\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FormControl className={classes.formControl} fullWidth>\n                                        <InputLabel>Add Some Tags</InputLabel>\n                                        <Select\n                                            multiple\n                                            value={post.tags}\n                                            name={'tags'}\n                                            onChange={handleChange}\n                                            input={<Input id=\"select-multiple-chip\"/>}\n                                            renderValue={(selected) => (\n                                                <div className={classes.chips}>\n                                                    {selected.map((value) => (\n                                                        <Chip icon={<LocalOfferIcon/>} key={value} label={value}\n                                                              className={classes.chip}/>\n                                                    ))}\n                                                </div>\n                                            )}\n                                            MenuProps={MenuProps}\n                                        >\n                                            {tagOptions.map((name) => (\n                                                <MenuItem key={name} value={name}>\n                                                    {name}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Body of your post\"\n                                        multiline\n                                        required\n                                        rowsMax={15}\n                                        variant=\"outlined\"\n                                        value={post.body}\n                                        name={'body'}\n                                        onChange={handleChange}\n                                    />\n                                </Grid>\n                            </Grid>\n\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submit}\n                                onClick={savePost}\n                            >\n                                Publish Blog Post\n                            </Button>\n\n                        </form>\n                    </Paper>\n                </Container>\n\n            </main>\n\n            {/* Footer */}\n            <WaveBorder\n                upperColor=\"#cfd8dc\"\n                lowerColor={'rgb(36, 40, 44)'}\n                animationNegativeDelay={4}\n            />\n            <Footer/>\n            {/* End footer */}\n\n        </React.Fragment>\n    );\n}\n\nexport default Publish;\n","/home/tanuj/WebstormProjects/blogs/src/widgets/WaveBorder.js",[],"/home/tanuj/WebstormProjects/blogs/src/widgets/PostCard.js",[],"/home/tanuj/WebstormProjects/blogs/src/Profile.js",["74","75","76"],"/home/tanuj/WebstormProjects/blogs/src/Login.js",[],"/home/tanuj/WebstormProjects/blogs/src/widgets/ProfileCard.js",[],"/home/tanuj/WebstormProjects/blogs/src/BlogPost.js",["77","78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"79","replacedBy":"83"},{"ruleId":"81","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":8,"column":8,"nodeType":"87","messageId":"88","endLine":8,"endColumn":14},{"ruleId":"85","severity":1,"message":"89","line":9,"column":8,"nodeType":"87","messageId":"88","endLine":9,"endColumn":18},{"ruleId":"85","severity":1,"message":"90","line":5,"column":8,"nodeType":"87","messageId":"88","endLine":5,"endColumn":20},{"ruleId":"85","severity":1,"message":"91","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"93","line":64,"column":8,"nodeType":"94","endLine":64,"endColumn":10,"suggestions":"95"},{"ruleId":"85","severity":1,"message":"96","line":70,"column":12,"nodeType":"87","messageId":"88","endLine":70,"endColumn":20},{"ruleId":"85","severity":1,"message":"97","line":70,"column":22,"nodeType":"87","messageId":"88","endLine":70,"endColumn":33},{"ruleId":"85","severity":1,"message":"98","line":18,"column":8,"nodeType":"87","messageId":"88","endLine":18,"endColumn":13},{"ruleId":"85","severity":1,"message":"99","line":42,"column":12,"nodeType":"87","messageId":"88","endLine":42,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":93,"column":8,"nodeType":"94","endLine":93,"endColumn":10,"suggestions":"100"},{"ruleId":"85","severity":1,"message":"99","line":34,"column":12,"nodeType":"87","messageId":"88","endLine":34,"endColumn":19},{"ruleId":"85","severity":1,"message":"101","line":35,"column":12,"nodeType":"87","messageId":"88","endLine":35,"endColumn":21},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],["102"],["103"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'SearchIcon' is defined but never used.","'TelegramIcon' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","ArrayExpression",["104"],"'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'Login' is defined but never used.","'loading' is assigned a value but never used.",["105"],"'responses' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"106","fix":"108"},"Update the dependencies array to be: [loadData]",{"range":"109","text":"110"},{"range":"111","text":"110"},[1928,1930],"[loadData]",[2963,2965]]